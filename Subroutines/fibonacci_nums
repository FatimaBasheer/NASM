;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;program to print fibonacci series up to a number using recursive subroutine;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
section .data:
space: db 32
zero: db "0"
zlen: equ $-zero

section .bss
array : resb 50
temp  : resb 1
num   : resw 1
nod   : resb 1
num1 : resw 1
num2 : resw 1
span: resw 1

section .text
	global _start
_start:
call read_num
mov ax,word[num]
mov word[span],ax

call print_space
cmp word[span],0
je exit
mov word[num],1
call print_num
call print_space
mov word[num1],0
mov word[num2],1
call fib_series
jmp exit

fib_series:
	mov ax,word[num1]
	mov bx,word[num2]
	add ax,bx
	mov word[num],ax
	cmp ax,word[span]
	jnb end_fib
	call print_num
	call print_space
	mov bx,word[num2]
	mov word[num1],bx
	mov word[num2],ax
	call fib_series
end_fib:
	ret
		

print_num:
	pusha
	cmp word[num],0
	je print_zero
	extract_no:
	cmp word[num],0
	je print_no
	inc byte[nod]
	mov dx,0
	mov ax,word[num]
	mov bx,10
	div bx
	push dx
	mov word[num],ax
	jmp extract_no
	
	print_no:
	cmp byte[nod],0
	je end_print
	dec byte[nod]
	pop dx
	mov byte[temp],dl
	add byte[temp],30h
	
	mov eax,4
	mov ebx,1
	mov ecx,temp
	mov edx,1
	int 80h
	jmp print_no

	print_zero:
	mov eax,4
	mov ebx,1
	mov ecx,zero
	mov edx,zlen
	int 80h
	
	end_print:
	popa
	ret
read_num:
	pusha
	mov word[num],0
	
	loop_read:
	mov eax,3
	mov ebx,0
	mov ecx,temp
	mov edx,1
	int 80h

	cmp byte[temp],10
	je end_read
	
	mov ax,word[num]
	mov bx,10
	mul bx
	mov bl,byte[temp]
	sub bl,30h
	mov bh,0
	add ax,bx
	mov word[num],ax
	jmp loop_read
	
	end_read:
	popa
	ret

print_space:
	pusha
	mov eax,4
	mov ebx,1
	mov ecx,space
	mov edx,1
	int 80h
	popa
	ret

exit:
	mov eax,1
	mov ebx,0
	int 80h
	
