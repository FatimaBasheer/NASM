;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;implementing the C function
;;int Fibonacci(int i)
;;{
;;if (i == 0)
;;return 0;
;;if (i == 1)
;;return 1;
;;return (Fibonacci(i - 1) + Fibonacci(i - 2));
;;}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
section .bss
array : resb 50
temp  : resb 1
num   : resw 1
nod   : resb 1
n: resw 1
sum: resw 1
flag:resw 1

section .text
	global _start
_start:
call read_num
mov ax,word[num]
mov word[n],ax
mov word[sum],0
call fibonacci
mov ax,word[sum]
mov word[num],ax
call print_num
call print_space
jmp exit

fibonacci:
	pusha
	cmp word[n],1
	je return1
	cmp word[n],0
	je return2
	dec word[n]
	call fibonacci
	inc word[n]
	mov ax,word[sum]
	mov word[flag],0
	sub word[n],2
	call fibonacci
	add word[n],2
	mov bx,word[sum]
	add ax,bx
	mov word[sum],ax
	jmp return3	
	return1:
	mov word[sum],1
	jmp return3
	return2:
	mov word[sum],0
	return3:
	popa
	ret	

print_num:
	pusha
	cmp word[num],0
	je print_zero
	extract_no:
	cmp word[num],0
	je print_no
	inc byte[nod]
	mov dx,0
	mov ax,word[num]
	mov bx,10
	div bx
	push dx
	mov word[num],ax
	jmp extract_no
	
	print_no:
	cmp byte[nod],0
	je end_print
	dec byte[nod]
	pop dx
	mov byte[temp],dl
	add byte[temp],30h
	
	mov eax,4
	mov ebx,1
	mov ecx,temp
	mov edx,1
	int 80h
	jmp print_no

	print_zero:
	mov eax,4
	mov ebx,1
	mov ecx,48
	mov edx,1
	int 80h
	
	end_print:
	popa
	ret
read_num:
	pusha
	mov word[num],0
	
	loop_read:
	mov eax,3
	mov ebx,0
	mov ecx,temp
	mov edx,1
	int 80h

	cmp byte[temp],10
	je end_read
	
	mov ax,word[num]
	mov bx,10
	mul bx
	mov bl,byte[temp]
	sub bl,30h
	mov bh,0
	add ax,bx
	mov word[num],ax
	jmp loop_read
	
	end_read:
	popa
	ret
print_space:
	pusha
	mov eax,4
	mov ebx,1
	mov ecx,32
	mov edx,1
	int 80h
	popa
	ret
exit:
	mov eax,1
	mov ebx,0
	int 80h
	
